name: CI

# 2.1 ‚Äì Gatilhos
on:
  push:
    branches: [ main, develop ]
  pull_request:

# 2.2 ‚Äì Permiss√µes m√≠nimas (boa pr√°tica de seguran√ßa)
permissions:
  contents: read                      # checkout
  pull-requests: write                # coment√°rios (Ruff, Codecov)

jobs:
  test:
    strategy:                         # üåê Matrix SO + Python
      fail-fast: true                 # ‚¨ÖÔ∏è  para tudo na 1¬™ falha (‚ö°)
      matrix:
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']

    runs-on: ${{ matrix.os }}

    env:                              # vari√°veis usadas nos testes
      PYTHON_KEYRING_BACKEND: keyring.backends.fail.Keyring  # evita prompt do Poetry
      ENVIRONMENT: test               # seu Settings() pega .env.test se existir

    steps:
      # 1Ô∏è‚É£  Checkout
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£  Setup Python conforme a matrix
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'                # Poetry cria venv pr√≥prio ‚Üí ok

      # 3Ô∏è‚É£  Cache Poetry + virtualenv
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
            ~\AppData\Local\pypoetry\Cache\virtualenvs
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # 4Ô∏è‚É£  Instala depend√™ncias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev --no-interaction

      # 5Ô∏è‚É£  Linter / formatador (Ruff)
      - name: Run Ruff (lint + format)
        run: poetry run ruff check --output-format=github .

      # 6Ô∏è‚É£  Linter / formatador (PyUpgrade)
      - name: PyUpgrade (sugere moderniza√ß√£o)
        run: poetry run pyupgrade --py312-plus --exit-zero-even-if-changed $(git ls-files '*.py')

      # 7Ô∏è‚É£  Linter / formatador (MyPy)
      - name: MyPy (type checking)
        run: poetry run mypy app

      # 6Ô∏è‚É£  Linter / formatador (Bandit)
      - name: Bandit (security)
        run: poetry run bandit -q -r app -lll

      # 6Ô∏è‚É£  Testes com fail-fast e cobertura ‚â• 85 % -> testes v√™m depois dos linters
      - name: Run Pytest
        run: |
          poetry run pytest --cov=app \
                            --cov-report=xml \
                            --cov-report=term-missing \
                            --cov-report=html \
                            --cov-fail-under=80

      # 7Ô∏è‚É£ (Opcional) Envia cobertura
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
